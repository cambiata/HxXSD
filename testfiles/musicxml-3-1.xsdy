<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xlink="http://www.w3.org/1999/xlink" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:annotation>
		<xs:documentation>MusicXML W3C XML schema (XSD)

Version 3.1

Copyright Â© 2004-2017 the Contributors to the MusicXML Specification, published by the W3C Music Notation Community Group under the W3C Community Final Specification Agreement (FSA):

	https://www.w3.org/community/about/agreements/final/

A human-readable summary is available:

	https://www.w3.org/community/about/agreements/fsa-deed/

This is the W3C XML Schema (XSD) version of the MusicXML 3.1 language. Validation is tightened by moving MusicXML definitions from comments into schema data types and definitions. Character entities and other entity usages that are not supported in W3C XML Schema have been removed. The features of W3C XML Schema make it easier to define variations of the MusicXML format, either via extension or restriction.

This file defines the MusicXML 3.1 XSD, including the score-partwise and score-timewise document elements.</xs:documentation>
	</xs:annotation>

	<xs:annotation>
		<xs:documentation>The MusicXML 3.1 DTD has no namespace, so for compatibility the MusicXML 3.1 XSD has no namespace either. Those who need to import the MusicXML XSD into another schema are advised to create a new version that uses "http://www.musicxml.org/xsd/MusicXML" as the namespace.</xs:documentation>
	</xs:annotation>
	<xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.musicxml.org/xsd/xml.xsd"/>
	<xs:import namespace="http://www.w3.org/1999/xlink" schemaLocation="http://www.musicxml.org/xsd/xlink.xsd"/>

	<!-- Simple types derived from common.mod entities and elements -->

	<xs:simpleType name="above-below">
		<xs:annotation>
			<xs:documentation>The above-below type is used to indicate whether one element appears above or below another element.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="above"/>
			<xs:enumeration value="below"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="beam-level">
		<xs:annotation>
			<xs:documentation>The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="1"/>
			<xs:maxInclusive value="8"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="color">
		<xs:annotation>
			<xs:documentation>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF.

For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.

As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:pattern value="#[\dA-F]{6}([\dA-F][\dA-F])?"/>
		</xs:restriction>
	</xs:simpleType>


	<xs:simpleType name="comma-separated-text">
		<xs:annotation>
			<xs:documentation>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:pattern value="[^,]+(, ?[^,]+)*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="css-font-size">
		<xs:annotation>
			<xs:documentation>The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="xx-small"/>
			<xs:enumeration value="x-small"/>
			<xs:enumeration value="small"/>
			<xs:enumeration value="medium"/>
			<xs:enumeration value="large"/>
			<xs:enumeration value="x-large"/>
			<xs:enumeration value="xx-large"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="divisions">
		<xs:annotation>
			<xs:documentation>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal"/>
	</xs:simpleType>

	<xs:simpleType name="enclosure-shape">
		<xs:annotation>
			<xs:documentation>The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="rectangle"/>
			<xs:enumeration value="square"/>
			<xs:enumeration value="oval"/>
			<xs:enumeration value="circle"/>
			<xs:enumeration value="bracket"/>
			<xs:enumeration value="triangle"/>
			<xs:enumeration value="diamond"/>
			<xs:enumeration value="pentagon"/>
			<xs:enumeration value="hexagon"/>
			<xs:enumeration value="heptagon"/>
			<xs:enumeration value="octagon"/>
			<xs:enumeration value="nonagon"/>
			<xs:enumeration value="decagon"/>
			<xs:enumeration value="none"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="fermata-shape">
		<xs:annotation>
			<xs:documentation>The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="normal"/>
			<xs:enumeration value="angled"/>
			<xs:enumeration value="square"/>
			<xs:enumeration value="double-angled"/>
			<xs:enumeration value="double-square"/>
			<xs:enumeration value="double-dot"/>
			<xs:enumeration value="half-curve"/>
			<xs:enumeration value="curlew"/>
			<xs:enumeration value=""/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="font-size">
		<xs:annotation>
			<xs:documentation>The font-size can be one of the CSS font sizes or a numeric point size.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="xs:decimal css-font-size"/>
	</xs:simpleType>

	<xs:simpleType name="font-style">
		<xs:annotation>
			<xs:documentation>The font-style type represents a simplified version of the CSS font-style property.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="normal"/>
			<xs:enumeration value="italic"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="font-weight">
		<xs:annotation>
			<xs:documentation>The font-weight type represents a simplified version of the CSS font-weight property.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="normal"/>
			<xs:enumeration value="bold"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="left-center-right">
		<xs:annotation>
			<xs:documentation>The left-center-right type is used to define horizontal alignment and text justification.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="left"/>
			<xs:enumeration value="center"/>
			<xs:enumeration value="right"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="left-right">
		<xs:annotation>
			<xs:documentation>The left-right type is used to indicate whether one element appears to the left or the right of another element.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="left"/>
			<xs:enumeration value="right"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="line-length">
		<xs:annotation>
			<xs:documentation>The line-length type distinguishes between different line lengths for doit, falloff, plop, and scoop articulations.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="short"/>
			<xs:enumeration value="medium"/>
			<xs:enumeration value="long"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="line-shape">
		<xs:annotation>
			<xs:documentation>The line-shape type distinguishes between straight and curved lines.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="straight"/>
			<xs:enumeration value="curved"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="line-type">
		<xs:annotation>
			<xs:documentation>The line-type type distinguishes between solid, dashed, dotted, and wavy lines.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="solid"/>
			<xs:enumeration value="dashed"/>
			<xs:enumeration value="dotted"/>
			<xs:enumeration value="wavy"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="midi-16">
		<xs:annotation>
			<xs:documentation>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="1"/>
			<xs:maxInclusive value="16"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="midi-128">
		<xs:annotation>
			<xs:documentation>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="1"/>
			<xs:maxInclusive value="128"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="midi-16384">
		<xs:annotation>
			<xs:documentation>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16,384.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="1"/>
			<xs:maxInclusive value="16384"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="mute">
		<xs:annotation>
			<xs:documentation>The mute type represents muting for different instruments, including brass, winds, and strings. The on and off values are used for undifferentiated mutes. The remaining values represent specific mutes.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="on"/>
			<xs:enumeration value="off"/>
			<xs:enumeration value="straight"/>
			<xs:enumeration value="cup"/>
			<xs:enumeration value="harmon-no-stem"/>
			<xs:enumeration value="harmon-stem"/>
			<xs:enumeration value="bucket"/>
			<xs:enumeration value="plunger"/>
			<xs:enumeration value="hat"/>
			<xs:enumeration value="solotone"/>
			<xs:enumeration value="practice"/>
			<xs:enumeration value="stop-mute"/>
			<xs:enumeration value="stop-hand"/>
			<xs:enumeration value="echo"/>
			<xs:enumeration value="palm"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="non-negative-decimal">
		<xs:annotation>
			<xs:documentation>The non-negative-decimal type specifies a non-negative decimal value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="number-level">
		<xs:annotation>
			<xs:documentation>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML document order. When a number-level value is optional, the value is 1 by default.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger">
			<xs:minInclusive value="1"/>
			<xs:maxInclusive value="6"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="number-of-lines">
		<xs:annotation>
			<xs:documentation>The number-of-lines type is used to specify the number of lines in text decoration attributes.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:nonNegativeInteger">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="3"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="number-or-normal">
		<xs:annotation>
			<xs:documentation>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="xs:decimal">
			<xs:simpleType>
				<xs:restriction base="xs:token">
					<xs:enumeration value="normal"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<xs:simpleType name="over-under">
		<xs:annotation>
			<xs:documentation>The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up).</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="over"/>
			<xs:enumeration value="under"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="percent">
		<xs:annotation>
			<xs:documentation>The percent type specifies a percentage from 0 to 100.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="100"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positive-decimal">
		<xs:annotation>
			<xs:documentation>The positive-decimal type specifies a positive decimal value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:minExclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positive-divisions">
		<xs:annotation>
			<xs:documentation>The positive-divisions type restricts divisions values to positive numbers.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="divisions">
			<xs:minExclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="positive-integer-or-empty">
		<xs:annotation>
			<xs:documentation>The positive-integer-or-empty values can be either a positive integer or an empty string.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="xs:positiveInteger">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value=""/>
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<xs:simpleType name="rotation-degrees">
		<xs:annotation>
			<xs:documentation>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="-180"/>
			<xs:maxInclusive value="180"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="semi-pitched">
		<xs:annotation>
			<xs:documentation>The semi-pitched type represents categories of indefinite pitch for percussion instruments.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="high"/>
			<xs:enumeration value="medium-high"/>
			<xs:enumeration value="medium"/>
			<xs:enumeration value="medium-low"/>
			<xs:enumeration value="low"/>
			<xs:enumeration value="very-low"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="smufl-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-glyph-name type is used for attributes that reference a specific Standard Music Font Layout (SMuFL) character. The value is a SMuFL canonical glyph name, not a code point. For instance, the value for a standard piano pedal mark would be keyboardPedalPed, not U+E650.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NMTOKEN"/>
	</xs:simpleType>

	<xs:simpleType name="smufl-accidental-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-accidental-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) accidental character. The value is a SMuFL canonical glyph name that starts with acc.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="smufl-glyph-name">
			<xs:pattern value="acc\c+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="smufl-coda-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-coda-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) coda character. The value is a SMuFL canonical glyph name that starts with coda.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="smufl-glyph-name">
			<xs:pattern value="coda\c*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="smufl-lyrics-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-lyrics-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) lyrics elision character. The value is a SMuFL canonical glyph name that starts with lyrics.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="smufl-glyph-name">
			<xs:pattern value="lyrics\c+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="smufl-pictogram-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-pictogram-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) percussion pictogram character. The value is a SMuFL canonical glyph name that starts with pict.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="smufl-glyph-name">
			<xs:pattern value="pict\c+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="smufl-segno-glyph-name">
		<xs:annotation>
			<xs:documentation>The smufl-segno-glyph-name type is used to reference a specific Standard Music Font Layout (SMuFL) segno character. The value is a SMuFL canonical glyph name that starts with segno.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="smufl-glyph-name">
			<xs:pattern value="segno\c*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="start-note">
		<xs:annotation>
			<xs:documentation>The start-note type describes the starting note of trills and mordents for playback, relative to the current note.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="upper"/>
			<xs:enumeration value="main"/>
			<xs:enumeration value="below"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="start-stop">
		<xs:annotation>
			<xs:documentation>The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets.

The values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="start"/>
			<xs:enumeration value="stop"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="start-stop-continue">
		<xs:annotation>
			<xs:documentation>The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks.

The values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="start"/>
			<xs:enumeration value="stop"/>
			<xs:enumeration value="continue"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="start-stop-single">
		<xs:annotation>
			<xs:documentation>The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for groupings.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="start"/>
			<xs:enumeration value="stop"/>
			<xs:enumeration value="single"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="string-number">
		<xs:annotation>
			<xs:documentation>The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched full-length string.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:positiveInteger"/>
	</xs:simpleType>

	<xs:simpleType name="symbol-size">
		<xs:annotation>
			<xs:documentation>The symbol-size type is used to distinguish between full, cue sized, grace cue sized, and oversized symbols.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="full"/>
			<xs:enumeration value="cue"/>
			<xs:enumeration value="grace-cue"/>
			<xs:enumeration value="large"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tenths">
		<xs:annotation>
			<xs:documentation>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.

Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal"/>
	</xs:simpleType>

	<xs:simpleType name="text-direction">
		<xs:annotation>
			<xs:documentation>The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="ltr"/>
			<xs:enumeration value="rtl"/>
			<xs:enumeration value="lro"/>
			<xs:enumeration value="rlo"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tied-type">
		<xs:annotation>
			<xs:documentation>The tied-type type is used as an attribute of the tied element to specify where the visual representation of a tie begins and ends. A tied element which joins two notes of the same pitch can be specified with tied-type start on the first note and tied-type stop on the second note. To indicate a note should be undamped, use a single tied element with tied-type let-ring. For other ties that are visually attached to a single note, such as a tie leading into or out of a repeated section or coda, use two tied elements on the same note, one start and one stop.

In start-stop cases, ties can add more elements using a continue type. This is typically used to specify the formatting of cross-system ties.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="start"/>
			<xs:enumeration value="stop"/>
			<xs:enumeration value="continue"/>
			<xs:enumeration value="let-ring"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="time-only">
		<xs:annotation>
			<xs:documentation>The time-only type is used to indicate that a particular playback-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:pattern value="[1-9][0-9]*(, ?[1-9][0-9]*)*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="top-bottom">
		<xs:annotation>
			<xs:documentation>The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="top"/>
			<xs:enumeration value="bottom"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="tremolo-type">
		<xs:annotation>
			<xs:documentation>The tremolo-type is used to distinguish multi-note, single-note, and unmeasured tremolos.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="start"/>
			<xs:enumeration value="stop"/>
			<xs:enumeration value="single"/>
			<xs:enumeration value="unmeasured"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="trill-beats">
		<xs:annotation>
			<xs:documentation>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="2"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="trill-step">
		<xs:annotation>
			<xs:documentation>The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="whole"/>
			<xs:enumeration value="half"/>
			<xs:enumeration value="unison"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="two-note-turn">
		<xs:annotation>
			<xs:documentation>The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="whole"/>
			<xs:enumeration value="half"/>
			<xs:enumeration value="none"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="up-down">
		<xs:annotation>
			<xs:documentation>The up-down type is used for the direction of arrows and other pointed symbols like vertical accents, indicating which way the tip is pointing.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="up"/>
			<xs:enumeration value="down"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="upright-inverted">
		<xs:annotation>
			<xs:documentation>The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="upright"/>
			<xs:enumeration value="inverted"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="valign">
		<xs:annotation>
			<xs:documentation>The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="top"/>
			<xs:enumeration value="middle"/>
			<xs:enumeration value="bottom"/>
			<xs:enumeration value="baseline"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="valign-image">
		<xs:annotation>
			<xs:documentation>The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="top"/>
			<xs:enumeration value="middle"/>
			<xs:enumeration value="bottom"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="yes-no">
		<xs:annotation>
			<xs:documentation>The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="yes"/>
			<xs:enumeration value="no"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="yes-no-number">
		<xs:annotation>
			<xs:documentation>The yes-no-number type is used for attributes that can be either boolean or numeric values.</xs:documentation>
		</xs:annotation>
		<xs:union memberTypes="yes-no xs:decimal"/>
	</xs:simpleType>

	<xs:simpleType name="yyyy-mm-dd">
		<xs:annotation>
			<xs:documentation>Calendar dates are represented yyyy-mm-dd format, following ISO 8601. This is a W3C XML Schema date type, but without the optional timezone data.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:date">
			<xs:pattern value="[^:Z]*"/>
		</xs:restriction>
	</xs:simpleType>


</xs:schema>
